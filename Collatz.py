#!/usr/bin/env python3

# ---------------------------
# projects/collatz/Collatz.py
# Copyright (C) 2016
# Glenn P. Downing
# ---------------------------

# ------------
# collatz_read
# ------------


def collatz_read(s):
    """
    read two ints
    s a string
    return a list of two ints, representing the beginning and end of a range, [i, j]
    """
    a = s.split()
    return [int(a[0]), int(a[1])]

# ------------
# collatz_eval
# ------------


def collatz_eval(i, j):
    """
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    return the max cycle length of the range [i, j]
    """
    try:
        assert j>=i
        assert i>0
    except:
        return ""

    cacheEvens = [2**n for n in range(1,32)]
    cachePrime = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]
    cachePrimeSol = [8, 6, 17, 15, 10, 13, 21, 16, 19, 107, 22, 110, 30, 105, 12, 33, 20, 28, 103, 116, 36, 111, 31, 119, 26, 88, 101, 114, 13, 47, 29, 91, 42, 24, 16, 37, 24, 68, 32, 32, 19, 45, 120, 27, 120]

    cache120 = [129, 171, 231, 235, 257, 258, 259, 265, 313, 327, 342, 343, 345, 347, 353, 386, 387, 388, 389, 390, 391, 398, 399, 411, 415, 417, 457, 459, 462, 463, 470, 471, 487, 491, 514, 515, 516, 517, 518, 521, 523, 530, 531, 543, 553, 609, 617, 619, 623, 626, 627, 639, 649, 654, 655, 667, 684, 685, 686, 689, 690, 691, 694, 695, 697, 703, 706, 707, 731, 737, 751, 763, 772, 773, 774, 775, 776, 778, 780, 781, 782, 783, 785, 796, 797, 798, 811, 815, 822, 823, 825, 830, 831, 834, 835, 859, 865, 871, 873, 879, 889, 913, 914, 915, 918, 919, 921, 924, 925, 926, 929, 935, 937, 940, 941, 942, 959, 967, 974, 975, 982, 983, 1001, 1017, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1046, 1047, 1055, 1060, 1061, 1062, 1071, 1081, 1083, 1086, 1087, 1097, 1106, 1107, 1113, 1127, 1145, 1153, 1161, 1163, 1185, 1215, 1217, 1218, 1219, 1223, 1225, 1227, 1233, 1234, 1235, 1238, 1239, 1246, 1247, 1249, 1252, 1253, 1254, 1263, 1278, 1279, 1287, 1289, 1298, 1299, 1307, 1308, 1309, 1310, 1319, 1334, 1335, 1351, 1368, 1370, 1372, 1373, 1377, 1378, 1379, 1380, 1381, 1382, 1388, 1389, 1390, 1394, 1395, 1403, 1406, 1407, 1412, 1413, 1414, 1419, 1439, 1441, 1449, 1451, 1455, 1462, 1463, 1467, 1471, 1474, 1475, 1483, 1502, 1503, 1515, 1519, 1526, 1527, 1537, 1544, 1546, 1548, 1549, 1550, 1551, 1552, 1553, 1556, 1557, 1560, 1562, 1563, 1564, 1565, 1566, 1570, 1571, 1579, 1583, 1592, 1593, 1594, 1596, 1597, 1607, 1622, 1623, 1625, 1630, 1631, 1633, 1644, 1645, 1646, 1647, 1650, 1651, 1660, 1661, 1662, 1665, 1668, 1669, 1670, 1675, 1691, 1695, 1705, 1707, 1711, 1718, 1719, 1730, 1731, 1742, 1743, 1745, 1746, 1747, 1758, 1759, 1767, 1778, 1779, 1801, 1819, 1823, 1826, 1827, 1828, 1829, 1830, 1835, 1836, 1837, 1838, 1839, 1841, 1842, 1843, 1848, 1850, 1851, 1852, 1853, 1858, 1859, 1870, 1871, 1874, 1875, 1880, 1882, 1884, 1885, 1895, 1903, 1915, 1918, 1919, 1921, 1931, 1934, 1935, 1948, 1949, 1950, 1951, 1961, 1964, 1965, 1966, 1977, 1979]
    cache120Sol = [122, 125, 128, 128, 123, 123, 123, 123, 131, 144, 126, 126, 126, 126, 126, 121, 121, 121, 121, 121, 121, 121, 121, 134, 134, 134, 129, 129, 129, 129, 129, 129, 142, 142, 124, 124, 124, 124, 124, 124, 124, 124, 124, 137, 137, 132, 132, 132, 132, 132, 132, 132, 145, 145, 145, 145, 127, 127, 127, 127, 127, 127, 127, 127, 127, 171, 127, 127, 140, 140, 140, 153, 122, 122, 122, 153, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 135, 135, 135, 135, 135, 135, 135, 135, 135, 148, 148, 179, 148, 148, 148, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 174, 130, 130, 130, 130, 143, 143, 143, 143, 143, 143, 156, 125, 125, 125, 125, 156, 125, 125, 125, 125, 125, 125, 125, 125, 125, 169, 125, 125, 125, 169, 138, 138, 138, 138, 138, 138, 138, 138, 138, 151, 151, 182, 151, 151, 164, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 177, 133, 133, 133, 177, 133, 133, 146, 146, 146, 146, 177, 146, 146, 146, 146, 146, 146, 159, 128, 128, 128, 128, 159, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 172, 172, 128, 128, 128, 128, 128, 141, 141, 141, 141, 141, 141, 141, 172, 141, 141, 141, 141, 141, 141, 154, 154, 154, 154, 123, 123, 123, 123, 154, 154, 123, 123, 123, 123, 123, 123, 154, 123, 123, 123, 123, 123, 123, 167, 123, 123, 123, 123, 123, 167, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 180, 136, 136, 136, 136, 136, 180, 136, 149, 149, 149, 149, 149, 149, 180, 180, 149, 149, 149, 149, 149, 149, 149, 149, 162, 162, 162, 131, 131, 131, 131, 131, 131, 131, 131, 131, 162, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 175, 175, 131, 131, 131, 131, 175, 131, 175, 131, 131, 144, 144, 144, 144, 144, 144, 144, 175, 175, 144, 144, 144, 144, 144]






    maxSteps = 0
    steps = 0
    s="["
    ssteps="["
    for n in range(i,j+1):
        temp = n
        steps = 1
        if n<2001 and n in cache120:
            pos = cache120.index(n)
            steps = cache120Sol[pos]
            n = 1
        #elif n in cachePrime:
        #    pos = cachePrime.index(n)
        #    steps += cachePrimeSol[pos]-1
        #    n = 1
        #else:
        #    pass
        while n>1:
            if n%2==0:
                n = int(n/2)
                steps += 1
            else:
                n = int(3*n+1)
                steps += 1
        #if steps>120:
            #s = s+str(steps)+", "
            #ssteps = ssteps+str(temp)+", "
        if steps>maxSteps:
            maxSteps = steps
    #print(s)
    #print(ssteps)
    return maxSteps

# -------------
# collatz_print
# -------------


def collatz_print(w, i, j, v):
    """
    print three ints
    w a writer
    i the beginning of the range, inclusive
    j the end       of the range, inclusive
    v the max cycle length
    """
    w.write(str(i) + " " + str(j) + " " + str(v) + "\n")

# -------------
# collatz_solve
# -------------


def collatz_solve(r, w):
    """
    r a reader
    w a writer
    """

    for s in r:
        #if not s.strip() == "":
            #continue
        i, j = collatz_read(s)
        v = collatz_eval(i, j)
        collatz_print(w, i, j, v)
